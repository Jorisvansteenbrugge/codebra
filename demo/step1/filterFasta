#!/usr/bin/env python
"""
Parses the CRB output file and filters those (duplicate) entries
out of the original fasta file
"""
__author__ = "Joris van Steenbrugge"
__date__ = "03/12/2016"

import argparse
from Bio import SeqIO

def parseArgs():
    """Parses command line arguments using flags

        Returns:
            parser.parse_args -- Arguments object containing 
                                 the entered arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--crbOut", dest="crbOut", required = True,
                        help = "Output tsv file from the crb-blast program")
    parser.add_argument("-i", dest="fastaInput", required = True,
                        help = "Input fasta file to be filtered")
    parser.add_argument("-o", dest="output", required = True,
                        help = "Output fasta file")
    return parser.parse_args()

def filterOutList(crbOut):
    """Uses the crb-blast output tsv file to create a list of fasta ids

        Keyword arguments:
            crbOut -- tsv output file from the crb-blast output.
        Returns:
            headers_to_remove -- List of fasta record ids to be removed 
                                 (because they are duplicate).
    """
    with open(crbOut) as in_file:
        headers_to_remove = [line.strip().split()[0] for line in in_file]
    return headers_to_remove

def filterFasta(fasta_file, headers_to_remove):
    """Filters the fasta file and output only non-duplicate records

        Keyword arguments:
            fasta_file -- Fasta formatted file to be filtered.
            headers_to_remove -- List of fasta record ids to be removed
                                 from the fasta file (because they are
                                 duplicate)
.
        yield is an alternative to return and "returns" all values send with 
        yield as a generator object (which behaves like a list but is more 
        memory efficient).
    """
    handle = open(fasta_file, "rU")
    for record in SeqIO.parse(handle, "fasta"):
        if record.id not in headers_to_remove:
            yield ">{}\n{}\n".format(record.id, record.seq)
    handle.close()

def outPut(outLines, outfile):
    """Writes the filtered (and unique) fasta record to the output file

        Keyword arguments:
            outLines -- Generator object containing the output lines
            outfile -- File path/name of the output file
    """
    with open(outfile, "w") as output_file:
        #List comprehension is a little faster (in execution) 
        # than the regular for loop.
        [output_file.write(x) for x in outLines]    

if __name__ == "__main__":
    args = parseArgs()
    headers_to_remove =  filterOutList(args.crbOut)
    outLines = filterFasta(args.fastaInput, headers_to_remove)
    outPut(outLines, args.output)
