#!/usr/bin/env python

from sys import argv

def parse_blatoutput(output_psl):
    for i in range(5):
        output_psl.readline()
    for line in output_psl:
        line = line.strip().split('\t')
        name_chr = line[13]
        start = line[15]
        end = line[16]
        blocksize = line[18]
        block_position= line[19]
        name_query = line[9]
        strand = line[8][1]
        blcount = len(line[18].split(','))
        yield [name_chr, int(start), int(end), name_query, "100", strand, start, end, "255,0,0", blcount, blocksize, block_position,line[0], line[1]]


if __name__ == "__main__":
    if len(argv) == 1:
        print("Usage: psil2bed <input.psl> <output.bed>")
    output_psl = open(argv[1], 'r')
    bed_entries = list(parse_blatoutput(open(argv[1], 'r')))

    if len(bed_entries) > 1:
        bed_entries = sorted(bed_entries, key=lambda line: line[2] - line[1])

        longest_len = bed_entries[-1][2] - bed_entries[-2][1]
        alLongest_len = bed_entries[-1][2] - bed_entries[-2][1]


        if alLongest_len >= (longest_len * 80)/100:
            longest_mismatch = bed_entries[-1][13]
            longest_match = bed_entries[-1][12]

            aLongest_mismatch = bed_entries[-2][13]
            aLongest_match = bed_entries[-2][12]

            if int(longest_mismatch) < int(aLongest_mismatch):
                out = bed_entries[-2][0:12]
            else: 
                out = bed_entries[-1][0:12]
        else:
            out = bed_entries[-1][0:12]

        print("\t".join(map(str, out)))
    elif len(bed_entries) == 1:
        #print(len(bed_entries))
        print("\t".join(map(str, bed_entries[0][0:12])))
    else:
        pass
